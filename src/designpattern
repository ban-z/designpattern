从面相对象谈起:
            底层思维   ==程序⚪==   抽象思维
            向下                   向上

深入理解面向对象：
                向下：封装，继承，多态
                向上：好的面向对象设计（面向对象语言的使用并不意味着设计也是面向对象）

软件设计固有的复杂性：客户需求，技术平台，开发团队，市场环境...

如何解决复杂性？：
            分解：分而治之
            抽象：忽略非本质细节，处理泛化和理想化的对象模型

软件设计的目标：复用，复用，复用！！！

面向对象设计，为什么？：
                变化是复用最大的天敌
                面向对象设计对打的优势在于：抵御变化

重新认识面向对象：
            （底层：三大特性：封装，继承，多态）
            隔离变化：更能适应软件的变化（影响最小）
            各司其职：个各类自己的责任
            对象是什么？
                        语言：代码和数据的封装
                        规格：一系列可被使用的公共接口
                        概念：某种拥有责任的抽象

面向对象八大设计原则：
                依赖倒置原则（DIP）
                                高层模块（稳定）不应该依赖低层模块（变化），二者都都应该依赖抽象（稳定）【稳定依赖抽象，就会不稳定】
                                抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）
                                【eg：抽象shape】

                开放封闭原则（OCP）
                                对扩展开放，对更改封闭
                                类模块应该是可扩展的，但是不可修改

                单一职责原则（SPR）
                                一个类应该仅有一个引起它变化的原因
                                变化的方向隐含着类的责任

                Liskov替换原则（LSP）
                                子类必须能够替换他们的基类（IS - A）
                                继承表达类型抽象

                接口隔离原则（ISP）
                                不应该强迫客户程序依赖他们不用的方法
                                接口应该小而完备

                优先使用对象组合，而不是类继承
                                类继承通常为“白箱复用”，对象组合通常为“黑箱复用”
                                继承在某种程度上破坏了封装性，子类父类耦合度高
                                而对象组合则只要求被组合的对象具有良好定义的外部接口， 耦合度低

                封装变化点
                                使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，
                                而不会对另一侧产生不良影响，从而实现层次间的松耦合
                                【封装更高层的理解：封装变化点，隔离变化】

                针对接口编程
                                不将变量类型声明为某个特定的具体类，而是声明为某个接口【不能绝对化，主要是业务】
                                客户程序无需获知对象的具体类型，只需要知道对象所具有的接口
                                减少系统中各部分的依赖关系，从而实现“高内聚，低耦合”的类型设计方案


面向接口设计：产业强盛的标志
            接口标准化【分工协作，实现复用】



将设计原则提升为设计经验：
                设计习语：描述与特定编程语言相关的低层模式，技巧，惯用法
                设计模式：主要描述“类与相互通信的对象之间的组合关系，包括角色，职责，协作等【主要解决变化中的复用性问题】”
                架构模式：描述系统与基本结构组织关系密切的高层模式，包括子系统的划分，职责，一家如何组织他们之间的关系的规则















































































