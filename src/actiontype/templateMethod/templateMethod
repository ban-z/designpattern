”组件协作“模式：
            现代软件专业分工之后的第一个结果是”框架与应用程序的划分“，”组件协作“模式通过晚期绑定，来
            实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。

            典型模式：
                    Template Method
                    Strategy
                    Observer/Event


动机：
    在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却又很多改变的需求，
    或者由于固有的原因（比如框架与应用之间的关系），而无法和任务的整体结构同时实现。

    如何在稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？

两种写法：
        第一种：
            早绑定：Library早已经存在，然后实现的Appliaction去实现2，4，和主流程

        第二种：
            晚绑定：Library虽然存在，但主流程和2，4的框架早已经存在，App只是动态改变其流程内部一些实现

模式定义：
        定义一个操作中的算法的骨架（稳定），而将一些步骤延迟（变化）到子类中。TM使得子类可以不改变（复用）
        一个算法结构，并且可以重新定义（override重写）该算法的某些特定步骤

要点总结：
        TM是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。他是最简洁的机制（多态性）为很多应用程序
        框架提供了灵活的扩展点，是代码复用方面的基本实现结构。

        除了可以灵活应对子步骤的变化外，”不要调用我，让我来带哦用你“的反向控制结构是TM的典型应用

        在具体实现方面，被TM调用的虚方法可以有实现，也可以没有实现（抽象方法，受保护的方法等）