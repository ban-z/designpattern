“接口隔离”模式：
    在组件构建的过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。
    采用添加一种间接（稳定）的接口，来隔离本来互相紧密关联的接口是一种常见的方案。

    典型模式：
        Facade
        Proxy
        Adapter
        Mediator

动机：
    在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常维持一种复杂的引用关系，如果
    遇到一些需求的更改，这种变化的引用关系将面临不断地变化

    在这种情况下，我们可使用一个“中介者对象”来管理对象间的关联关系，避免互相交互的对象之间的紧耦合的
    引用关系，从而更好地抵御变化

模式定义：
    用一个中介者对象来封装（封装变化）一些的对象交互。中介者使个对象不需要显式的相互引用（编译时依赖
    --》 运行时依赖），从而使其耦合松散（管理变化），而且可以独立的改变他们之间的交互。

要点总结：
    将多个对象间复杂的关联关系解耦，Medaitor模式将多个对象间的控制逻辑进行集中管理，变“多个对象间相
    互关联“为”多个对象和一个中介者关联“，简化了系统的维护，抵御了可能的变化

    随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂、这时候可以对Mediator对象进行分解处理

    Facade模式是解耦系统间（单向的）对象关联关系。Mediator模式是解耦系统内各个对象之间（双向）的关联
    关系