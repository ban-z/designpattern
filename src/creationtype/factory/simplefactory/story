1.https://blog.csdn.net/lovelion/article/details/9300337
2.https://blog.csdn.net/lovelion/article/details/9300549
3.https://blog.csdn.net/lovelion/article/details/9300657
4.https://blog.csdn.net/lovelion/article/details/9300731

引入：Sunny软件公司欲基于Java语言开发一套图表库，
        该图表库可以为应用系统提供各种不同外观的图表，例如柱状图、饼状图、折线图等。
        Sunny软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表库，
        而且可以较为方便地对图表库进行扩展，以便能够在将来增加一些新类型的图表。

简单工厂模式概述： 首先将需要创建的各种不同对象（例如各种不同的Chart对象）的相关代码封装到不同的类中，
                 这些类称为具体产品类，而将它们公共的代码进行抽象和提取后封装在一个抽象产品类中，
                 每一个具体产品类都是抽象产品类的子类；然后提供一个工厂类用于创建各种产品，
                 在工厂类中提供一个创建产品的工厂方法，该方法可以根据所传入的参数不同创建不同的具体产品对象；
                 客户端只需调用工厂类的工厂方法并传入相应的参数即可得到一个产品对象。

简单工厂模式(Simple Factory Pattern)：定义一个工厂类，它可以根据参数的不同返回不同类的实例，
           被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态(static)方法，
           因此简单工厂模式又被称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。

简单工厂模式总结
      简单工厂模式提供了专门的工厂类用于创建对象，将对象的创建和对象的使用分离开，它作为一种最简单的工厂模式在软件开发中得到了较为广泛的应用。

         1. 主要优点

       简单工厂模式的主要优点如下：
                (1) 工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。
                (2) 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。
                (3) 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。

         2. 主要缺点

       简单工厂模式的主要缺点如下：
                (1) 由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。
                (2) 使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂度和理解难度。
                (3) 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。
                (4) 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。

        3. 适用场景

       在以下情况下可以考虑使用简单工厂模式：
                 (1) 工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。
                 (2) 客户端只知道传入工厂类的参数，对于如何创建对象并不关心。