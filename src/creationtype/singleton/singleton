“对象性能”模式：
    面向对象很好解决了“抽象”的问题，但不可避免的要付出一定代价。对于通常情况来讲，面向对象的成本大都可以忽略。但在某些情况，面向对象所带来的成本必须谨慎处理。

典型模式：
    sington
    flyweight

单件模式：
    动机：在软件系统中，通常有这样一些特殊的类，必须保证他们在系统中只存在一个实例，才能保证他们的逻辑正确性，以及良好的效率

         如何绕过常规的构造器，提供一种机制来保证一个类只有一个实例？

         这应该是类设计者的责任，而不是使用者的责任

    模式定义：保证一个类仅有一个实例，并提供一个该实例的全局访问点

    要点总结：
        Singleton模式中的实例构造器可以设置为protected以允许子类派生
        Singleton模式一般不要支持拷贝构造函数和Clone接口，因为这有可能导致多个对象实例（c++）
        如何实现多线程下安全的Singleton？注意对双检查锁的正确实现


8种写法对比：
        饿汉：简单，但是没有lazy loading
        懒汉：有线程安全问题
        静态内部类；可用
        双重检查：面试可用
        枚举：最好 ==》  写法简单，且无副作用，线程安全有保障，避免反序列化，反射破坏单例

各种写法的适合场景：
        最好使用枚举法
        非线程同步的方法不能使用
        如果程序一开始加载很多资源，应该使用懒加载
        饿汉式如果是对象的创建需要配置文件就不适用
        懒加载虽然好，但是静态内部类这种方式会引入编程的复杂性
