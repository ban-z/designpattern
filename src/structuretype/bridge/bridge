“单一职责模式”：
    在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，
    同时充斥着重复的代码，这时候的关键往往是划清责任

    典型模式：
        Decorator
        Bridge

动机：
    由于某些类型的固有的实现逻辑，使得他们具有两个变化的维度，乃至多个维度的变化

    如何应对这种“多维度的变化”？如何利用卖你想对象技术来使得类型可以轻松的沿着两个乃至多个方向变化，
    从而不引入额外的复杂度？

模式定义：
        将抽象部分（业务功能）与实现部分（平台实现）分离，是他们都可以独立的变化

要点总结：
        Bridge模式使用“对象间的组合关系”解耦了抽象与实现之间固有的绑定关系，使得抽象和实现可以沿着
        各自的唯独变化。所谓抽象和实现沿着各自维度的变化，即“子类化”他们

        Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因）
        复用性比较差。Bridge模式是比多继承更好的解决方案

        Bridge模式的应用一般在“两个非常强的变化维度”，有时一个类也有多于两个的变化维度，这时可以使用Bridge模式