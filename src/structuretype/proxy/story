1.https://blog.csdn.net/lovelion/article/details/8227953
2.https://blog.csdn.net/lovelion/article/details/8228042
3.https://blog.csdn.net/lovelion/article/details/8228132
4.https://blog.csdn.net/lovelion/article/details/8228156

代理模式是常用的结构型设计模式之一，当无法直接访问某个对象或访问某个对象存在困难时，
可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。
根据代理模式的使用目的不同，代理模式又可以分为多种类型，例如
保护代理、远程代理、虚拟代理、缓冲代理等，
它们应用于不同的场合，满足用户的不同需求。

代理模式：给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。

在实际开发过程中，代理类的实现比上述代码要复杂很多，代理模式根据其目的和实现方式不同可分为很多种类，其中常用的几种代理模式简要说明如下：
       (1) 远程代理(Remote Proxy)：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使(Ambassador)。
       (2) 虚拟代理(Virtual Proxy)：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。
       (3) 保护代理(Protect Proxy)：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。
       (4) 缓冲代理(Cache Proxy)：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。
       (5) 智能引用代理(Smart Reference Proxy)：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。

引入：
    某软件公司承接了某信息咨询公司的收费商务信息查询系统的开发任务，该系统的基本需求如下：
          (1) 在进行商务信息查询之前用户需要通过身份验证，只有合法用户才能够使用该查询系统；
          (2) 在进行商务信息查询时系统需要记录查询日志，以便根据查询次数收取查询费用。
          该软件公司开发人员已完成了商务信息查询模块的开发任务，现希望能够以一种松耦合的方式向原有系统增加身份验证和日志记录功能，
          客户端代码可以无区别地对待原始的商务信息查询模块和增加新功能之后的商务信息查询模块，而且可能在将来还要在该信息查询模块中增加一些新的功能。
          试使用代理模式设计并实现该收费商务信息查询系统。

    远程代理(Remote Proxy)是一种常用的代理模式，它使得客户端程序可以访问在远程主机上的对象，
    远程主机可能具有更好的计算性能与处理速度，可以快速响应并处理客户端的请求。
    远程代理可以将网络的细节隐藏起来，使得客户端不必考虑网络的存在。
    客户端完全可以认为被代理的远程业务对象是在本地而不是在远程，
    而远程代理对象承担了大部分的网络通信工作，并负责对远程业务方法的调用。

    虚拟代理(Virtual Proxy)也是一种常用的代理模式，对于一些占用系统资源较多或者加载时间较长的对象，
    可以给这些对象提供一个虚拟代理。在真实对象创建成功之前虚拟代理扮演真实对象的替身，
    而当真实对象创建之后，虚拟代理将用户的请求转发给真实对象。
           通常，在以下两种情况下可以考虑使用虚拟代理：
            (1) 由于对象本身的复杂性或者网络等原因导致一个对象需要较长的加载时间，
                此时可以用一个加载时间相对较短的代理对象来代表真实对象。通常在实现时可以结合多线程技术，
                一个线程用于显示代理对象，其他线程用于加载真实对象。这种虚拟代理模式可以应用在程序启动的时候，
                由于创建代理对象在时间和处理复杂度上要少于创建真实对象，因此，在程序启动时，
                可以用代理对象代替真实对象初始化，大大加速了系统的启动时间。当需要使用真实对象时，
                再通过代理对象来引用，而此时真实对象可能已经成功加载完毕，可以缩短用户的等待时间。
            (2) 当一个对象的加载十分耗费系统资源的时候，也非常适合使用虚拟代理。虚拟代理可以让那些
                占用大量内存或处理起来非常复杂的对象推迟到使用它们的时候才创建，而在此之前用一个相对来说
                占用资源较少的代理对象来代表真实对象，再通过代理对象来引用真实对象。为了节省内存，
                在第一次引用真实对象时再创建对象，并且该对象可被多次重用，在以后每次访问时需要检测所需对象是否
                已经被创建，因此在访问该对象时需要进行存在性检测，这需要消耗一定的系统时间，但是可以节省内存空间，
                这是一种用时间换取空间的做法。
           无论是以上哪种情况，虚拟代理都是用一个“虚假”的代理对象来代表真实对象，通过代理对象来间接引用真实对象，可以在一定程度上提高系统的性能。

    缓冲代理(Cache Proxy)也是一种较为常用的代理模式，它为某一个操作的结果提供临时的缓存存储空间，
    以便在后续使用中能够共享这些结果，从而可以避免某些方法的重复执行，优化系统性能。

代理模式效果与适用场景：
    代理模式是常用的结构型设计模式之一，它为对象的间接访问提供了一个解决方案，可以对对象的访问进行控制。
    代理模式类型较多，其中远程代理、虚拟代理、保护代理等在软件开发中应用非常广泛。

     模式优点：
        代理模式的共同优点如下：
               (1) 能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。
               (2) 客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。
               此外，不同类型的代理模式也具有独特的优点，例如：
               (1) 远程代理为位于两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统的整体运行效率。
               (2) 虚拟代理通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销。
               (3) 缓冲代理为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间。
               (4) 保护代理可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限。

     模式缺点：
        代理模式的主要缺点如下：
               (1) 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。
               (2) 实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。

     模式适用场景：
          代理模式的类型较多，不同类型的代理模式有不同的优缺点，它们应用于不同的场合：
               (1) 当客户端对象需要访问远程主机中的对象时可以使用远程代理。
               (2) 当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用虚拟代理，例如一个对象需要很长时间才能完成加载时。
               (3) 当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用缓冲代理。通过使用缓冲代理，系统无须在客户端每一次访问时都重新执行操作，只需直接从临时缓冲区获取操作结果即可。
               (4) 当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用保护代理。
               (5) 当需要为一个对象的访问（引用）提供一些额外的操作时可以使用智能引用代理。