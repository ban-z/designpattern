“接口隔离”模式：
    在组件构建的过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。
    采用添加一种间接（稳定）的接口，来隔离本来互相紧密关联的接口是一种常见的方案。

    典型模式：
        Facade
        Proxy
        Adapter
        Mediator

动机：
    组件的客户和组件中各种复杂的子系统有过多的耦合，随着外部客户程序和个子系统的烟花，这种过多的耦合
    面临很多变化的挑战

    如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互
    解耦？

模式定义：
    为子系统中的一组接口提供了一个一致的（稳定的）界面，Facade模式定义了一个高层接口，这个接口使得
    这一子系统更加容易使用和复用

要点总结：
    从客户程序的角度来看，Facade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到
    了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化

    Facade模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade模式很多时候更是一种架构
    涉及模式

    Facade模式并非一个集装箱，可以任意的放进任何多个对象，Facade模式中组件的内部应该是“相互耦合关系
    比较大的一些类组件“，”高内聚“，”松耦合“，而不是一个简单的功能集合